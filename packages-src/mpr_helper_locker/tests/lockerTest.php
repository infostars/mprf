<?php
namespace mpr\helper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-27 at 18:05:56.
 */
class lockerTest extends \PHPUnit_Framework_TestCase
{

    protected static $test_method_name = "test_method_name";

    /**
     * @covers mpr\helper\locker::lock
     */
    public function testLock()
    {
        locker::lock(self::$test_method_name);
        $this->assertTrue(locker::locked(self::$test_method_name));
    }

    /**
     * @covers mpr\helper\locker::unlock
     * @depends testLock
     */
    public function testUnlock()
    {
        $this->testLock();
        locker::unlock(self::$test_method_name);
        $this->assertFalse(locker::locked(self::$test_method_name));
    }

    /**
     * @covers mpr\helper\locker::locked
     * @depends testUnlock
     */
    public function testLocked()
    {
        $this->assertFalse(locker::locked(self::$test_method_name));
        locker::lock(self::$test_method_name);
        $this->assertTrue(locker::locked(self::$test_method_name));
        locker::unlock(self::$test_method_name);
        $this->assertFalse(locker::locked(self::$test_method_name));
    }

    /**
     * @covers mpr\helper\locker::strictLocked
     */
    public function testStrictLocked()
    {
        $method_name = self::$test_method_name;
        $expire = 5;
        $check_func_locked = function($method_name) {
            return locker::locked($method_name);
        };
        $check_func_false = function($method_name) {
            return false;
        };
        $this->assertFalse($check_func_locked($method_name));
        $result1 = locker::strictLocked($check_func_locked, $method_name, $method_name, false, $expire);
        $this->assertTrue($result1);
        $this->assertFalse($check_func_locked($method_name));
        $result2 = locker::strictLocked($check_func_locked, $method_name, $method_name, true, $expire);
        $this->assertFalse($check_func_locked($method_name));
        $this->assertTrue($result2);
        sleep(1);
        $result3 = locker::strictLocked($check_func_false, $method_name, $method_name, true, $expire);
        $this->assertTrue($result3);
        sleep($expire);
        $result4 = locker::strictLocked($check_func_false, $method_name, $method_name, true, $expire);
        $this->assertFalse($result4);
    }

    /**
     * @covers mpr\helper\locker::cachedLockedFunction
     */
    public function testCachedLockedFunction()
    {
        $method_name = self::$test_method_name;
        $expire = 5;
        $check_func_locked = function($method_name) {
            return locker::locked($method_name);
        };
        $check_func_false = function($method_name) {
            return false;
        };
        $this->assertFalse($check_func_locked($method_name));
        $result2 = locker::cachedLockedFunction($check_func_locked, $method_name, $method_name, $expire);
        $this->assertFalse($check_func_locked($method_name));
        $this->assertTrue($result2);
        sleep(1);
        $result3 = locker::cachedLockedFunction($check_func_false, $method_name, $method_name, $expire);
        $this->assertTrue($result3);
        sleep($expire);
        $result4 = locker::cachedLockedFunction($check_func_false, $method_name, $method_name, $expire);
        $this->assertFalse($result4);
    }

    /**
     * @covers mpr\helper\locker::lockedFunction
     */
    public function testLockedFunction()
    {
        $method_name = self::$test_method_name;
        $check_func = function($method_name) {
            return locker::locked($method_name);
        };
        $this->assertFalse($check_func($method_name));
        $result1 = locker::lockedFunction($check_func, $method_name, $method_name);
        $this->assertFalse($check_func($method_name));
        $this->assertTrue($result1);
    }
}
