<?php
namespace mpr\locker;

use \mpr\locker\sharedMemory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-20 at 12:30:42.
 */
class sharedMemoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var phpSemaphore
     */
    protected $object;

    /**
     * Test driver name
     *
     * @var string
     */
    protected $driver_name = "cache_semaphore";

    /**
     * Test memory address
     *
     * @var int
     */
    protected $test_mem_address = 1;

    /**
     * Test key
     *
     * @var int
     */
    protected $test_key = 'test_key';

    /**
     * Test value
     *
     * @var string
     */
    protected $test_data = "test data";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $this->object = new sharedMemory($this->test_mem_address);
    }

    /**
     * @covers mpr\locker\phpSemaphore::getLockKey
     */
    public function testGetLockKey()
    {
        $this->assertInternalType('int', $this->object->getLockKey($this->test_key));
    }

    /**
     * @covers mpr\locker\phpSemaphore::lock
     */
    public function testLock()
    {
        $this->object->lock($this->test_key);
        $this->assertTrue($this->object->locked($this->test_key));
    }

    /**
     * @covers mpr\locker\phpSemaphore::unlock
     * @depends testLock
     */
    public function testUnlock()
    {
        $this->testLock();
        $this->object->unlock($this->test_key);
        $this->assertFalse($this->object->locked($this->test_key));
    }

    /**
     * @covers mpr\locker\phpSemaphore::locked
     * @depends testLock
     */
    public function testLocked()
    {
        $this->testLock();
        $this->assertTrue($this->object->locked($this->test_key));
        $this->object->unlock($this->test_key);
        $this->assertFalse($this->object->locked($this->test_key));

        $not_cached_key = 'adfgasdf';
        $this->assertFalse($this->object->locked($not_cached_key));
    }

    /**
     * @covers mpr\locker\phpSemaphore::locked
     * @depends testLock
     */
    public function testSelfUnlock()
    {
        $this->testLock();
        $counter = 0;
        while($this->object->locked($this->test_key)) {
            sleep(10);
            $this->assertLessThanOrEqual(2, $counter);
            $counter++;
        }
    }

    /**
     * @covers mpr\locker\phpSemaphore::storeLockedData
     */
    public function testStoreLockedData()
    {
        $lock_key = $this->object->getLockKey($this->test_key);
        $this->object->storeLockedData($lock_key, $this->test_data);
    }

    /**
     * @covers mpr\locker\phpSemaphore::getLockedData
     */
    public function testGetLockedData()
    {
        $this->testStoreLockedData();
        $lock_key = $this->object->getLockKey($this->test_key);
        $locked_data = $this->object->getLockedData($lock_key);
        $this->assertEquals($this->test_data, $locked_data);
    }
}
