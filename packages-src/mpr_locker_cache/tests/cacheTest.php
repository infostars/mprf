<?php
namespace mpr\locker;

use \mpr\locker;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-19 at 17:42:11.
 */
class cacheTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Test driver name
     *
     * @var string
     */
    protected $driver_name = "memcached";

    /**
     * Test method name
     *
     * @var string
     */
    protected $test_method = "test_method";

    /**
     * Test data
     *
     * @var string
     */
    protected $test_data = "test data";

    /**
     * Test lock time
     *
     * @var string
     */
    protected $test_lock_time = 2;

    /**
     * @var cache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new cache($this->driver_name);
    }

    /**
     * @covers mpr\locker\cache::getLockKey
     */
    public function testGetLockKey()
    {
        $lock_key = $this->object->getLockKey($this->test_method);
        $this->assertContains("lck:", $lock_key);
        $this->assertContains($this->test_method, $lock_key);
        $this->assertEquals("lck:{$this->test_method}", $lock_key);
    }

    /**
     * @covers mpr\locker\cache::lock
     */
    public function testLock()
    {
        $this->assertTrue($this->object->lock($this->test_method, $this->test_lock_time));
    }

    /**
     * @covers mpr\locker\cache::unlock
     */
    public function testUnlock()
    {
        /**
         * @note always return true if locked or unlocked
         */
        $this->object->unlock($this->test_method);
    }

    /**
     * @covers mpr\locker\cache::locked
     */
    public function testLocked()
    {
        $this->testLock();
        $this->assertTrue($this->object->locked($this->test_method));
        $this->object->unlock($this->test_method);
        sleep($this->test_lock_time);
        $this->assertFalse($this->object->locked($this->test_method));

        $not_cached_method = "not_cached_method";
        $this->assertFalse($this->object->locked($not_cached_method));
    }

    /**
     * @covers mpr\locker\cache::lockMore
     */
    public function testLockMore()
    {
        $this->assertFalse($this->object->lockMore($this->test_method, $this->test_lock_time));

        $this->object->lock($this->test_method, $this->test_lock_time);
        $this->assertTrue($this->object->lockMore($this->test_method, $this->test_lock_time));

        $this->object->unlock($this->test_method);
    }
}
