<?php
namespace mpr\collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-21 at 10:07:50.
 */
class arrayListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var arrayList
     */
    protected $object;

    protected $testObject1 = ["this", "is", "test", "object", "number", "1"];
    protected $testObject2 = ["this", "is", "test", "object", "number", "2"];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new arrayList();
    }

    /**
     * @covers mpr\collections\arrayList::Add
     */
    public function testAdd()
    {
        $this->setUp();
        $this->object->Add($this->testObject1);
        $this->assertTrue($this->object->Contains($this->testObject1), "ArrayList must contains testObject1");
    }

    /**
     * @covers mpr\collections\arrayList::AddRange
     */
    public function testAddRange()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertCount(2, $this->object, "Count in ArrayList must equals 2");
        $this->assertSame($range, $this->object->ToArray(), "Array \$range and ->toArray() must equals");
    }

    /**
     * @covers mpr\collections\arrayList::ToArray
     */
    public function testToArray()
    {
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertEquals($range, $this->object->ToArray());
    }

    /**
     * @covers mpr\collections\arrayList::Clear
     */
    public function testClear()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->Add($this->testObject1);
        $this->object->AddRange($range);
        $this->object->Clear();
        $this->assertCount(0, $this->object, "ArrayList must be empty");
    }

    /**
     * @covers mpr\collections\arrayList::Contains
     */
    public function testContains()
    {
        $this->setUp();
        $this->object->Add($this->testObject1);
        $this->assertTrue($this->object->Contains($this->testObject1), "ArrayList must contains testObject1");
    }

    /**
     * @covers mpr\collections\arrayList::CopyTo
     */
    public function testCopyTo()
    {
        $this->setUp();
        $clone = $this->object->ToArray();
        $this->object->AddRange([$this->testObject1, $this->testObject2]);
        $this->assertNotSame($clone, $this->object->ToArray(), "\$clone and object->ToArray must be different");
        $this->object->CopyTo($clone);
        $this->assertSame($clone, $this->object->ToArray(), "\$clone and object->ToArray must be same");
    }

    /**
     * @covers mpr\collections\arrayList::Equals
     */
    public function testEquals()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $same = new arrayList();
        $this->assertFalse($this->object->Equals($same), "Objects must be different");
        $same->AddRange($range);
        $this->assertTrue($this->object->Equals($same), "Objects must be same");
    }

    /**
     * @covers mpr\collections\arrayList::Each
     */
    public function testEach()
    {
        $range = [$this->testObject1, $this->testObject2];
        $closure = function(&$item) {
            $item = implode('_', $item);
            return $item;
        };
        $this->setUp();
        $this->object->AddRange($range);
        $this->object->Each($closure);
        $this->assertNotSame($range, $this->object->ToArray(), "Arrays must be different");
        foreach($range as &$value) {
            $value = $closure($value);
        }
        $this->assertSame($range, $this->object->ToArray(), "Arrays must be same");
    }

    /**
     * @covers mpr\collections\arrayList::GetRange
     */
    public function testGetRange()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertEquals([$this->testObject2], $this->object->GetRange(1, 1), "Must be array with one item of second element");
    }

    /**
     * @covers mpr\collections\arrayList::IndexOf
     */
    public function testIndexOf()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertEquals(1, $this->object->IndexOf($this->testObject2), "testObject must be on index 1");
    }

    /**
     * @covers mpr\collections\arrayList::Insert
     */
    public function testInsert()
    {
        $this->setUp();
        $this->assertCount(0, $this->object);
        $this->object->Insert(1, $this->testObject1);
        $this->assertCount(1, $this->object);
        $this->assertEquals(1, $this->object->IndexOf($this->testObject1));
    }

    /**
     * @covers mpr\collections\arrayList::InsertRange
     */
    public function testInsertRange()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->assertCount(0, $this->object);
        $this->object->InsertRange(1, $range);
        $this->assertCount(2, $this->object);
        $this->assertEquals(2, $this->object->IndexOf($this->testObject2));
    }

    /**
     * @covers mpr\collections\arrayList::Remove
     */
    public function testRemove()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertCount(2, $this->object);
        $this->object->Remove($this->testObject2);
        $this->assertCount(1, $this->object);
    }

    /**
     * @covers mpr\collections\arrayList::RemoveAt
     */
    public function testRemoveAt()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertCount(2, $this->object);
        $this->object->RemoveAt(1);
        $this->assertNull($this->object->IndexOf($this->testObject2));
    }

    /**
     * @covers mpr\collections\arrayList::RemoveRange
     */
    public function testRemoveRange()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertCount(2, $this->object);
        $this->object->RemoveRange(0, 2);
        $this->assertCount(0, $this->object);
    }

    /**
     * @covers mpr\collections\arrayList::Reverse
     */
    public function testReverse()
    {
        $this->setUp();
        $range = [$this->testObject1, $this->testObject2];
        $this->object->AddRange($range);
        $this->assertEquals($range, $this->object->ToArray());
        $this->object->Reverse();
        $this->assertNotEquals($range, $this->object->ToArray());
        $range = array_reverse($range);
        $this->assertEquals($range, $this->object->ToArray());
    }
}
